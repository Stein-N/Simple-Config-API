base {
    archivesName = "${mod_id}-fabric-${minecraft_version}"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    includedLibs
}

dependencies {
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    implementation group: 'com.electronwill.night-config', name: 'toml', version: '3.6.7'
    includedLibs group: 'com.electronwill.night-config', name: 'toml', version: '3.6.7'

    compileOnly project(":common")
}

loom {
    if(project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client { client(); setConfigName("Fabric Client") }
        server { server(); setConfigName("Fabric Server") }
        datagen {
            inherit server
            name "Fabric Datagen"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
    from project(":fabric").file("src/main/generated")
}

jar {
    from configurations.includedLibs.collect { it.isDirectory() ? it : zipTree(it) }
}