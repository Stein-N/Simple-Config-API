base {
    archivesName = "${mod_id}-fabric"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    if(project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }
    }
}

configurations {
    includedLibs
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    implementation group: 'com.electronwill.night-config', name: 'toml', version: '3.6.7'
    includedLibs group: 'com.electronwill.night-config', name: 'toml', version: '3.6.7'


    compileOnly project(":common")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar {
    from {
        configurations.includedLibs.collect {it.isDirectory() ? it : zipTree(it)}
    }
}
